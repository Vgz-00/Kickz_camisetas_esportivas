import { useState, useEffect } from "react"; // Adicionado useEffect
import { useClienteStore } from "./context/ClienteContext";
import type { PedidoType } from "./utils/PedidoType";
import { toast } from 'sonner'
import './MeusPedidos.css' // ImportaÃ§Ã£o de CSS mantida

const apiUrl = import.meta.env.VITE_API_URL

export default function Pedidos() {
Â  Â  const [pedidos, setPedidos] = useState<PedidoType[]>([])
Â  Â  const { cliente } = useClienteStore()

Â  Â  
Â  Â  async function buscaDados() {
Â  Â  Â  Â  // Verifica se o ID do cliente estÃ¡ presente antes de buscar
Â  Â  Â  Â  if (!cliente.id) {
Â  Â  Â  Â  Â  console.log("Cliente nÃ£o logado, abortando busca de pedidos.");
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  Â  if (!token) {
Â  Â  Â  Â  Â  console.log("Token nÃ£o encontrado, abortando busca de pedidos.");
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch(`${apiUrl}/pedidos/meus`, {
Â  Â  Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` }
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const erro = await response.json();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Erro ao buscar pedidos:", erro.erro);
Â  Â  Â  Â  Â  Â  Â  Â  } catch {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Erro ao buscar pedidos:", response.statusText);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  setPedidos([]);
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const dados = await response.json()
Â  Â  Â  Â  Â  Â  setPedidos(dados)
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Erro no servidor ao buscar pedidos:", error);
Â  Â  Â  Â  Â  Â  setPedidos([]);
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // CHAMADA DA FUNÃ‡ÃƒO: Executa buscaDados quando o componente monta ou o cliente loga/desloga
Â  Â  useEffect(() => {
Â  Â  Â  Â  buscaDados();
Â  Â  }, [cliente.id]); // Adicionamos cliente.id como dependÃªncia
Â  Â  
Â  Â  async function handleFinalizarPedido(pedidoId: number) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const token = localStorage.getItem("token"); 

Â  Â  Â  Â  Â  Â  const response = await fetch(`${apiUrl}/pedidos/${pedidoId}/confirmar`, {
Â  Â  Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  Â  Â  headers: { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${token}` 
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  if (response.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  toast.success(`Pedido #${pedidoId} finalizado com sucesso!`)
Â  Â  Â  Â  Â  Â  Â  Â  buscaDados() 
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  const erro = await response.json();
Â  Â  Â  Â  Â  Â  Â  Â  toast.error(erro.erro || `Erro ao finalizar o pedido #${pedidoId}.`)
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  toast.error("Ocorreu um erro no servidor.")
Â  Â  Â  Â  }
Â  Â  }
const pedidosTable = pedidos.map(pedido => (
Â  Â  <tr key={pedido.id} className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
Â  Â  Â  Â  <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
Â  Â  Â  Â  Â  Â  <p><b>Pedido #{pedido.id}</b></p>
Â  Â  Â  Â  Â  Â  <p><i>Data: {(pedido.createdAt)}</i></p>
Â  Â  Â  Â  Â  Â  <p>Status: <b>{pedido.status}</b></p>
Â  Â  Â  Â  Â  Â  {pedido.status === 'PENDENTE' && pedido.itens.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleFinalizarPedido(pedido.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-2 text-white bg-green-500 hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Finalizar Pedido
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </td>
Â  Â  Â  Â  <td className="px-6 py-4">
Â  Â  Â  Â  Â  Â  {pedido.itens.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  <i>Nenhum item adicionado</i>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <ul className="list-disc pl-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pedido.itens.map(item => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={item.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.camisa.modelo} - {item.quantidade}x Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (R$: {Number(item.preco).toLocaleString("pt-br", { minimumFractionDigits: 2 })})
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </td>
Â  Â  </tr>
))

Â  Â  return (
Â  Â  Â  Â  <section className="max-w-7xl mx-auto">
Â  Â  Â  Â  Â  Â  <h1 className="mb-6 mt-4 text-3xl font-extrabold leading-none tracking-tight text-gray-900 md:text-4xl lg:text-5xl dark:text-black">
Â  Â  Â  Â  Â  Â  Â  Â  Listagem de Meus Pedidos
Â  Â  Â  Â  Â  Â  </h1>

Â  Â  Â  Â  Â  Â  {pedidos.length === 0 ?
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="mb-4 mt-10 text-3xl font-extrabold leading-none tracking-tight text-gray-900 md:text-4xl dark:text-black">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &nbsp;&nbsp; VocÃª ainda nÃ£o fez nenhum pedido. ðŸ›’
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  :
Â  Â  Â  Â  Â  Â  Â  Â  <table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th scope="col" className="px-6 py-3">Pedido</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th scope="col" className="px-6 py-3">Itens</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pedidosTable}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  </section>
Â  Â  )
}
